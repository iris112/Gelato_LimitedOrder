{"ast":null,"code":"var _jsxFileName = \"/home/one/Desktop/MyWorking/Gelato/challenge/frontend/src/Components/FormCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { Contract } from '@ethersproject/contracts';\nimport { useWeb3React } from '@web3-react/core';\nimport { injected, useEagerConnect, useInactiveListener } from '../../Utils';\nimport RelayProxyABI from '../../ABI/RelayProxy.json';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: 700,\n    margin: 20,\n    padding: 10,\n    overflowWrap: 'anywhere'\n  },\n  title: {\n    fontWeight: 'bold'\n  },\n  tokenTitle: {\n    marginTop: \"20px\"\n  },\n  firstAmount: {\n    marginRight: 10\n  },\n  price: {\n    marginLeft: 10\n  },\n  form: {\n    marginTop: 20\n  },\n  submit: {\n    width: 100,\n    marginTop: 10\n  }\n});\n;\n\nconst ApplicationBar = () => {\n  _s();\n\n  const context = useWeb3React();\n  const {\n    active,\n    account,\n    library,\n    activate\n  } = context;\n  const classes = useStyles();\n  const [firstAmount, setFirstAmount] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [secondAmount, setSecondAmount] = useState(\"0\");\n  const triedEager = useEagerConnect();\n  useInactiveListener(!triedEager);\n\n  const handleChangeAmount = e => {\n    setFirstAmount(e.target.value);\n  };\n\n  const handleChangePrice = e => {\n    setPrice(e.target.value);\n  };\n\n  const submitAvailable = () => firstAmount && price;\n\n  const handleSubmit = async () => {\n    // axios.post('/api/vc', {\n    //   firstName,\n    //   lastName,\n    //   subjectDID\n    // })\n    // .then((response: AxiosResponse) => {\n    //   setVC(response.data.vc);\n    // })\n    // .catch((error) => {\n    //   console.log(error);\n    // });\n    try {\n      await activate(injected);\n    } catch (ex) {\n      console.log(ex);\n    }\n\n    console.log(process.env.ADDRESS);\n    const relayProxy = new Contract(process.env.ADDRESS, RelayProxyABI, library === null || library === void 0 ? void 0 : library.getSigner());\n    const nonce = await relayProxy.getNonce(account);\n    const typedData = {\n      types: {\n        MetaTransaction: [{\n          name: 'nonce',\n          type: 'uint256'\n        }, {\n          name: 'amount',\n          type: 'uint256'\n        }, {\n          name: 'secret',\n          type: 'bytes32'\n        }, {\n          name: 'module',\n          type: 'address'\n        }, {\n          name: 'inputToken',\n          type: 'address'\n        }, {\n          name: 'owner',\n          type: 'address'\n        }, {\n          name: 'witness',\n          type: 'address'\n        }, {\n          name: 'data',\n          type: 'bytes'\n        }]\n      },\n      domain: {\n        name: 'DepositToken',\n        version: '1',\n        chainId: 1337,\n        verifyingContract: process.env.ADDRESS\n      },\n      txData: {\n        nonce: nonce,\n        amount: 10,\n        secret: \"0x1234567812345678123456781234567812345678123456781234567812345678\",\n        module: process.env.MODULE,\n        inputToken: process.env.INPUTTOKEN,\n        owner: account,\n        witness: process.env.WITNESS,\n        data: \"0xFFFFFFFFFFFFFFFFFFFFFF\"\n      }\n    };\n    const {\n      domain,\n      types,\n      txData\n    } = typedData;\n    const signature = await (library === null || library === void 0 ? void 0 : library.getSigner()._signTypedData(domain, types, txData));\n    const split = Web3.utils.getSignatureParameters(signature);\n    console.log(signature);\n  };\n\n  useEffect(() => {\n    if (submitAvailable()) setSecondAmount((parseFloat(firstAmount) * parseFloat(price)).toString());else setSecondAmount(\"0\");\n  }, [firstAmount, price]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        variant: \"h5\",\n        children: \"Limit Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.tokenTitle,\n        variant: \"subtitle1\",\n        children: \"Token1: MATIC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"first-amount\",\n        type: \"number\",\n        \"data-testid\": \"first-amount\",\n        className: classes.firstAmount,\n        label: \"Amount\",\n        variant: \"standard\",\n        value: firstAmount,\n        onChange: handleChangeAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"price\",\n        type: \"number\",\n        \"data-testid\": \"price\",\n        className: classes.price,\n        label: \"Price\",\n        variant: \"standard\",\n        onChange: handleChangePrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.tokenTitle,\n        variant: \"subtitle1\",\n        children: \"Token2: USDT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        children: [\"Amount: \", secondAmount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        className: classes.form,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.submit,\n          variant: \"contained\",\n          color: \"primary\",\n          \"data-testid\": \"submit\",\n          disabled: submitAvailable() ? false : true,\n          onClick: handleSubmit,\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ApplicationBar, \"1fFsj3MGbp7JNXLJVDFUBkdeTO8=\", false, function () {\n  return [useWeb3React, useStyles, useEagerConnect, useInactiveListener];\n});\n\n_c = ApplicationBar;\nexport default ApplicationBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplicationBar\");","map":{"version":3,"sources":["/home/one/Desktop/MyWorking/Gelato/challenge/frontend/src/Components/FormCard/index.tsx"],"names":["React","useState","useEffect","makeStyles","Card","Button","CardContent","Typography","TextField","FormGroup","Contract","useWeb3React","injected","useEagerConnect","useInactiveListener","RelayProxyABI","Web3","useStyles","root","width","margin","padding","overflowWrap","title","fontWeight","tokenTitle","marginTop","firstAmount","marginRight","price","marginLeft","form","submit","ApplicationBar","context","active","account","library","activate","classes","setFirstAmount","setPrice","secondAmount","setSecondAmount","triedEager","handleChangeAmount","e","target","value","handleChangePrice","submitAvailable","handleSubmit","ex","console","log","process","env","ADDRESS","relayProxy","getSigner","nonce","getNonce","typedData","types","MetaTransaction","name","type","domain","version","chainId","verifyingContract","txData","amount","secret","module","MODULE","inputToken","INPUTTOKEN","owner","witness","WITNESS","data","signature","_signTypedData","split","utils","getSignatureParameters","parseFloat","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport axios, { AxiosResponse } from 'axios';\nimport { Contract } from '@ethersproject/contracts';\nimport { useWeb3React } from '@web3-react/core';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { injected, useEagerConnect, useInactiveListener } from '../../Utils';\nimport RelayProxyABI from '../../ABI/RelayProxy.json';\nimport Web3 from 'web3';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 700,\n    margin: 20,\n    padding: 10,\n    overflowWrap: 'anywhere'\n  },\n  title: {\n    fontWeight: 'bold',\n  },\n  tokenTitle: {\n    marginTop: \"20px\",\n  },\n  firstAmount: {\n    marginRight: 10\n  },\n  price: {\n    marginLeft: 10\n  },\n  form: {\n    marginTop: 20\n  },\n  submit: {\n    width: 100,\n    marginTop: 10\n  }\n});\n\ninterface DID {\n  did: string;\n};\n\nconst ApplicationBar: React.FC = () => {\n  const context = useWeb3React<Web3Provider>()\n  const { active, account, library, activate } = context;\n  const classes = useStyles();\n  const [firstAmount, setFirstAmount] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [secondAmount, setSecondAmount] = useState(\"0\");\n  const triedEager = useEagerConnect();\n  \n  useInactiveListener(!triedEager);\n\n  const handleChangeAmount = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n    setFirstAmount(e.target.value);\n  }\n\n  const handleChangePrice = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n    setPrice(e.target.value)\n  }\n\n  const submitAvailable = () => firstAmount && price;\n  \n  const handleSubmit = async () => {\n    // axios.post('/api/vc', {\n    //   firstName,\n    //   lastName,\n    //   subjectDID\n    // })\n    // .then((response: AxiosResponse) => {\n    //   setVC(response.data.vc);\n    // })\n    // .catch((error) => {\n    //   console.log(error);\n    // });\n    \n    try {\n      await activate(injected)\n    } catch (ex) {\n      console.log(ex)\n    }\n\n    console.log(process.env.ADDRESS)\n    const relayProxy = new Contract(process.env.ADDRESS as string, RelayProxyABI, library?.getSigner())\n    const nonce = await relayProxy.getNonce(account);\n    const typedData = {\n      types: {\n        MetaTransaction: [\n          { name: 'nonce', type: 'uint256' },\n          { name: 'amount', type: 'uint256' },\n          { name: 'secret', type: 'bytes32' },\n          { name: 'module', type: 'address' },\n          { name: 'inputToken', type: 'address' },\n          { name: 'owner', type: 'address' },\n          { name: 'witness', type: 'address' },\n          { name: 'data', type: 'bytes' },\n        ],\n      },\n      domain: {\n        name: 'DepositToken',\n        version: '1',\n        chainId: 1337,\n        verifyingContract: process.env.ADDRESS,\n      },\n      txData: {\n        nonce: nonce,\n        amount: 10,\n        secret: \"0x1234567812345678123456781234567812345678123456781234567812345678\",\n        module: process.env.MODULE,\n        inputToken: process.env.INPUTTOKEN,\n        owner: account,\n        witness: process.env.WITNESS,\n        data: \"0xFFFFFFFFFFFFFFFFFFFFFF\"\n      },\n    };\n    \n    const { domain, types, txData } = typedData;\n\n    const signature = await library?.getSigner()._signTypedData(domain, types, txData);\n    const split = Web3.utils.getSignatureParameters(signature as string);\n    console.log(signature);\n  }\n\n  useEffect(() => {\n    if (submitAvailable())\n      setSecondAmount((parseFloat(firstAmount) * parseFloat(price)).toString());\n    else\n      setSecondAmount(\"0\");\n  }, [firstAmount, price]);\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} variant=\"h5\">Limit Order</Typography>\n        <Typography className={classes.tokenTitle} variant=\"subtitle1\">Token1: MATIC</Typography>\n        <TextField \n          id=\"first-amount\" \n          type=\"number\"\n          data-testid=\"first-amount\" \n          className={classes.firstAmount} \n          label=\"Amount\" \n          variant=\"standard\" \n          value={firstAmount}\n          onChange={handleChangeAmount}/>\n        <TextField \n          id=\"price\" \n          type=\"number\"\n          data-testid=\"price\" \n          className={classes.price} \n          label=\"Price\" \n          variant=\"standard\" \n          onChange={handleChangePrice}/>\n        <Typography className={classes.tokenTitle} variant=\"subtitle1\">Token2: USDT</Typography>\n        <Typography variant=\"subtitle1\">Amount: {secondAmount}</Typography>\n        \n        <FormGroup className={classes.form}>\n          <Button \n            className={classes.submit} \n            variant=\"contained\" \n            color=\"primary\" \n            data-testid=\"submit\"\n            disabled={submitAvailable() ? false : true}\n            onClick={handleSubmit}>\n              SUBMIT\n          </Button>\n        </FormGroup>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ApplicationBar;"]},"metadata":{},"sourceType":"module"}