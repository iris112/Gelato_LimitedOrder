{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\nexport const useEagerConnect = () => {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      alert(isAuthorized);\n\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n};\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});\n\nexport const useInactiveListener = (suppress = false) => {\n  _s2();\n\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n\n      const handleChainChanged = chainId => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      ethereum.on('connect', handleConnect);\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect);\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n};\n\n_s2(useInactiveListener, \"tg+LUTCYzAVRTYzC32Q8yta1BMA=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/home/one/Desktop/MyWorking/Gelato/challenge/frontend/src/Utils/index.tsx"],"names":["InjectedConnector","useState","useEffect","useWeb3React","injected","supportedChainIds","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","alert","undefined","catch","useInactiveListener","suppress","error","ethereum","window","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"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","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n\nexport const useEagerConnect = () => {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      alert(isAuthorized);\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport const useInactiveListener = (suppress: boolean = false) => {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}"]},"metadata":{},"sourceType":"module"}